/*
 * 标准交易
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.yeepay.yop.scenario.bindcard.domain.model.trade.request;


import com.yeepay.yop.sdk.http.Headers;
import com.yeepay.yop.sdk.http.HttpMethodName;
import com.yeepay.yop.sdk.http.YopContentType;
import com.yeepay.yop.sdk.internal.DefaultRequest;
import com.yeepay.yop.sdk.internal.Request;
import com.yeepay.yop.sdk.model.transform.RequestMarshaller;
import com.yeepay.yop.sdk.protocol.marshaller.PrimitiveMarshallerUtils;

import java.util.Map;
import java.util.UUID;


public class OrderRequestMarshaller implements RequestMarshaller<OrderRequest> {
    private final String serviceName = "Trade";

    private final String resourcePath = "/rest/v1.0/trade/order";

    private final String contentType = "application/x-www-form-urlencoded";

    private final HttpMethodName httpMethodName = HttpMethodName.POST;

    public static OrderRequestMarshaller getInstance() {
        return CacheInstanceHolder.INSTANCE;
    }

    @Override
    public Request<OrderRequest> marshall(OrderRequest request) {
        Request<OrderRequest> internalRequest = new DefaultRequest<OrderRequest>(request, serviceName);
        internalRequest.setResourcePath(resourcePath);
        internalRequest.setHttpMethod(httpMethodName);
        if (!internalRequest.getHeaders().containsKey(Headers.YOP_REQUEST_ID)) {
            String requestId = UUID.randomUUID().toString();
            internalRequest.addHeader(Headers.YOP_REQUEST_ID, requestId);
        }
        Map<String, String> customerHeaders = request.getHeaders();
        if (customerHeaders != null) {
            for (String key : customerHeaders.keySet()) {
                internalRequest.addHeader(key, customerHeaders.get(key));
            }
        }
        if (request.getParentMerchantNo() != null) {
            internalRequest.addParameter("parentMerchantNo", PrimitiveMarshallerUtils.marshalling(request.getParentMerchantNo(), "String"));
        }
        if (request.getMerchantNo() != null) {
            internalRequest.addParameter("merchantNo", PrimitiveMarshallerUtils.marshalling(request.getMerchantNo(), "String"));
        }
        if (request.getOrderId() != null) {
            internalRequest.addParameter("orderId", PrimitiveMarshallerUtils.marshalling(request.getOrderId(), "String"));
        }
        if (request.getOrderAmount() != null) {
            internalRequest.addParameter("orderAmount", PrimitiveMarshallerUtils.marshalling(request.getOrderAmount(), "String"));
        }
        if (request.getGoodsName() != null) {
            internalRequest.addParameter("goodsName", PrimitiveMarshallerUtils.marshalling(request.getGoodsName(), "String"));
        }
        if (request.getFundProcessType() != null) {
            internalRequest.addParameter("fundProcessType", PrimitiveMarshallerUtils.marshalling(request.getFundProcessType(), "String"));
        }
        if (request.getNotifyUrl() != null) {
            internalRequest.addParameter("notifyUrl", PrimitiveMarshallerUtils.marshalling(request.getNotifyUrl(), "String"));
        }
        if (request.getMemo() != null) {
            internalRequest.addParameter("memo", PrimitiveMarshallerUtils.marshalling(request.getMemo(), "String"));
        }
        if (request.getSubOrderDetail() != null) {
            internalRequest.addParameter("subOrderDetail", PrimitiveMarshallerUtils.marshalling(request.getSubOrderDetail(), "String"));
        }
        if (request.getExpiredTime() != null) {
            internalRequest.addParameter("expiredTime", PrimitiveMarshallerUtils.marshalling(request.getExpiredTime(), "String"));
        }
        if (request.getRedirectUrl() != null) {
            internalRequest.addParameter("redirectUrl", PrimitiveMarshallerUtils.marshalling(request.getRedirectUrl(), "String"));
        }
        if (request.getCsUrl() != null) {
            internalRequest.addParameter("csUrl", PrimitiveMarshallerUtils.marshalling(request.getCsUrl(), "String"));
        }
        if (request.getBusinessInfo() != null) {
            internalRequest.addParameter("businessInfo", PrimitiveMarshallerUtils.marshalling(request.getBusinessInfo(), "String"));
        }
        if (request.getTerminalInfo() != null) {
            internalRequest.addParameter("terminalInfo", PrimitiveMarshallerUtils.marshalling(request.getTerminalInfo(), "String"));
        }
        if (request.getYpPromotionInfo() != null) {
            internalRequest.addParameter("ypPromotionInfo", PrimitiveMarshallerUtils.marshalling(request.getYpPromotionInfo(), "String"));
        }
        if (request.getPayerInfo() != null) {
            internalRequest.addParameter("payerInfo", PrimitiveMarshallerUtils.marshalling(request.getPayerInfo(), "String"));
        }
        if (request.getPayMerchantNo() != null) {
            internalRequest.addParameter("payMerchantNo", PrimitiveMarshallerUtils.marshalling(request.getPayMerchantNo(), "String"));
        }
        if (request.getProductInfo() != null) {
            internalRequest.addParameter("productInfo", PrimitiveMarshallerUtils.marshalling(request.getProductInfo(), "String"));
        }
        internalRequest.setContentType(YopContentType.FORM_URL_ENCODE);
        internalRequest.addHeader(Headers.CONTENT_TYPE, internalRequest.getContentType().getValue());
        return internalRequest;
    }

    private static class CacheInstanceHolder {
        public static OrderRequestMarshaller INSTANCE = new OrderRequestMarshaller();

        private CacheInstanceHolder() {
        }
    }
}
