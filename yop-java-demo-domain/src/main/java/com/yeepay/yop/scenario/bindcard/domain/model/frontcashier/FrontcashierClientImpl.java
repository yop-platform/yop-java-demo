/*
 * 前置收银台
 * 前置收银台
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.yeepay.yop.scenario.bindcard.domain.model.frontcashier;

import com.yeepay.yop.scenario.bindcard.domain.model.frontcashier.request.*;
import com.yeepay.yop.scenario.bindcard.domain.model.frontcashier.response.*;
import com.yeepay.yop.sdk.client.*;
import com.yeepay.yop.sdk.exception.YopClientException;
import com.yeepay.yop.sdk.http.HttpResponseAnalyzerSupport;
import com.yeepay.yop.sdk.http.HttpResponseHandler;
import com.yeepay.yop.sdk.http.handler.DefaultHttpResponseHandler;
import com.yeepay.yop.sdk.model.transform.RequestMarshaller;

public class FrontcashierClientImpl implements FrontcashierClient {

    private final ClientHandler clientHandler;

    FrontcashierClientImpl(ClientParams clientParams) {
        this.clientHandler = new ClientHandlerImpl(new ClientHandlerParams().withClientParams(clientParams));
    }

    @Override
    public BindcardBindcardlistResponse bindcardBindcardlist(BindcardBindcardlistRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindcardBindcardlistRequest> requestMarshaller = BindcardBindcardlistRequestMarshaller.getInstance();
        HttpResponseHandler<BindcardBindcardlistResponse> responseHandler =
                new DefaultHttpResponseHandler<BindcardBindcardlistResponse>(BindcardBindcardlistResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindcardBindcardlistRequest, BindcardBindcardlistResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public BindcardConfirmV2Response bindcardConfirmV2(BindcardConfirmV2Request request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindcardConfirmV2Request> requestMarshaller = BindcardConfirmV2RequestMarshaller.getInstance();
        HttpResponseHandler<BindcardConfirmV2Response> responseHandler =
                new DefaultHttpResponseHandler<BindcardConfirmV2Response>(BindcardConfirmV2Response.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindcardConfirmV2Request, BindcardConfirmV2Response>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public BindcardRequestV2Response bindcardRequestV2(BindcardRequestV2Request request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindcardRequestV2Request> requestMarshaller = BindcardRequestV2RequestMarshaller.getInstance();
        HttpResponseHandler<BindcardRequestV2Response> responseHandler =
                new DefaultHttpResponseHandler<BindcardRequestV2Response>(BindcardRequestV2Response.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindcardRequestV2Request, BindcardRequestV2Response>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public BindpayConfirmResponse bindpayConfirm(BindpayConfirmRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindpayConfirmRequest> requestMarshaller = BindpayConfirmRequestMarshaller.getInstance();
        HttpResponseHandler<BindpayConfirmResponse> responseHandler =
                new DefaultHttpResponseHandler<BindpayConfirmResponse>(BindpayConfirmResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindpayConfirmRequest, BindpayConfirmResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public BindpayRequestResponse bindpayRequest(BindpayRequestRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindpayRequestRequest> requestMarshaller = BindpayRequestRequestMarshaller.getInstance();
        HttpResponseHandler<BindpayRequestResponse> responseHandler =
                new DefaultHttpResponseHandler<BindpayRequestResponse>(BindpayRequestResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindpayRequestRequest, BindpayRequestResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public BindpaySendsmsResponse bindpaySendsms(BindpaySendsmsRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<BindpaySendsmsRequest> requestMarshaller = BindpaySendsmsRequestMarshaller.getInstance();
        HttpResponseHandler<BindpaySendsmsResponse> responseHandler =
                new DefaultHttpResponseHandler<BindpaySendsmsResponse>(BindpaySendsmsResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<BindpaySendsmsRequest, BindpaySendsmsResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public void shutdown() {
        clientHandler.shutdown();
    }

}
