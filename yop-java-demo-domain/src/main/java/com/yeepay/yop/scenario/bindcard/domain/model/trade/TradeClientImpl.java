/*
 * 标准交易
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.yeepay.yop.scenario.bindcard.domain.model.trade;


import com.yeepay.yop.scenario.bindcard.domain.model.trade.request.OrderQueryRequest;
import com.yeepay.yop.scenario.bindcard.domain.model.trade.request.OrderQueryRequestMarshaller;
import com.yeepay.yop.scenario.bindcard.domain.model.trade.request.OrderRequest;
import com.yeepay.yop.scenario.bindcard.domain.model.trade.request.OrderRequestMarshaller;
import com.yeepay.yop.scenario.bindcard.domain.model.trade.response.OrderQueryResponse;
import com.yeepay.yop.scenario.bindcard.domain.model.trade.response.OrderResponse;
import com.yeepay.yop.sdk.client.*;
import com.yeepay.yop.sdk.exception.YopClientException;
import com.yeepay.yop.sdk.http.HttpResponseAnalyzerSupport;
import com.yeepay.yop.sdk.http.HttpResponseHandler;
import com.yeepay.yop.sdk.http.handler.DefaultHttpResponseHandler;
import com.yeepay.yop.sdk.model.transform.RequestMarshaller;

public class TradeClientImpl implements TradeClient {

    private final ClientHandler clientHandler;

    TradeClientImpl(ClientParams clientParams) {
        this.clientHandler = new ClientHandlerImpl(new ClientHandlerParams().withClientParams(clientParams));
    }

    @Override
    public OrderResponse order(OrderRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<OrderRequest> requestMarshaller = OrderRequestMarshaller.getInstance();
        HttpResponseHandler<OrderResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderResponse>(OrderResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderRequest, OrderResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public OrderQueryResponse orderQuery(OrderQueryRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        if (request.getParentMerchantNo() == null) {
            throw new YopClientException("request.parentMerchantNo is required.");
        }
        if (request.getMerchantNo() == null) {
            throw new YopClientException("request.merchantNo is required.");
        }
        if (request.getOrderId() == null) {
            throw new YopClientException("request.orderId is required.");
        }
        RequestMarshaller<OrderQueryRequest> requestMarshaller = OrderQueryRequestMarshaller.getInstance();
        HttpResponseHandler<OrderQueryResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderQueryResponse>(OrderQueryResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderQueryRequest, OrderQueryResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public void shutdown() {
        clientHandler.shutdown();
    }

}
